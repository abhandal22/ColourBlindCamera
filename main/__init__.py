from PIL import Image
import numpy as np
import os, math

UPLOAD_FOLDER = os.path.join("staticFiles", "uploads")
BORDER = 10

def mergeImages(original :Image, converted :Image) -> Image:
    merged_img = Image.new("RGBA", ((2*original.width)+BORDER, original.height))
    merged_img.paste(original, (0,0))
    merged_img.paste(converted, (original.width+BORDER,0))
    return merged_img


def convertRGB(rgb, severity :int, type :str):
    if type == "deuteran":
        return np.dot(DEUTERANOMALY_SEVERITY[severity], rgb)
    elif type == "protan":
        return np.dot(PROTANOMALY_SEVERITY[severity], rgb)
    elif type == "tritan":
        return np.dot(TRITANOMALY_SEVERITY[severity], rgb)

# def convertToLinearRGB(srgb):
#     if srgb <= 0.04045:
#         return round((srgb/12.92) * 255.0)
#     elif 0.04045 < srgb <= 1:
#         return round(pow(((srgb + 0.055)/1.055), 2.4) * 255.0)

# PARAM: Image 
# EFFECTS: Creates a new image with colourblind filter applied to the given image
def convertColour(img :Image, severity :int, type :str) -> Image:
    picture = Image.new("RGBA", (img.width, img.height))
    picture.paste(img, (0,0))
    for x in range(0, picture.width):
        for y in range(0, picture.height):
            currentColor = picture.getpixel((x, y))
            r = currentColor[0]
            g = currentColor[1]
            b = currentColor[2]
            convertedRGB = convertRGB(np.array([[r], [g], [b]]), severity, type)
            newColour = (int(math.floor(convertedRGB[0][0])), int(math.floor(convertedRGB[1][0])), int(math.floor(convertedRGB[2][0])))
            picture.putpixel((x, y), newColour)
    picture.save("new.png")
    return picture


DEUTERANOMALY_SEVERITY = [np.array([[0.866435, 0.177704, -0.044139], # 1
                                    [0.049567, 0.939063, 0.011370],
                                    [-0.003453, 0.007233, 0.996220]]),
                          np.array([[0.760729, 0.319078, -0.079807], # 2
                                    [0.090568, 0.889315, 0.020117],
                                    [-0.006027, 0.013325, 0.992702]]),
                          np.array([[0.675425, 0.433850, -0.109275], # 3
                                    [0.125303, 0.847755, 0.026942],
                                    [-0.007950, 0.018572, 0.989378]]),
                          np.array([[0.605511, 0.528560, -0.134071], # 4
                                    [0.155318, 0.812366, 0.032316],
                                    [-0.009376, 0.023176, 0.986200]]),  
                          np.array([[0.547494, 0.607765, -0.155259], # 5
                                    [0.181692, 0.781742, 0.036566],
                                    [-0.010410, 0.027275, 0.983136]]), 
                          np.array([[0.498864, 0.674741, -0.173604], # 6
                                    [0.205199, 0.754872, 0.039929],
                                    [-0.011131, 0.030969, 0.980162]]), 
                          np.array([[0.457771, 0.731899, -0.189670], # 7
                                    [0.226409, 0.731012, 0.042579],
                                    [-0.011595, 0.034333, 0.977261]]), 
                          np.array([[0.422823, 0.781057, -0.203881], # 8
                                    [0.245752, 0.709602, 0.044646],
                                    [-0.011843, 0.037423, 0.974421]]), 
                          np.array([[0.392952, 0.823610, -0.216562], # 9
                                    [0.263559, 0.690210, 0.046232],
                                    [-0.011910, 0.040281, 0.971630]]),      
                          np.array([[0.367322, 0.860646, -0.227968], # 10
                                    [0.280085, 0.672501, 0.047413], 
                                    [-0.011820, 0.042940, 0.968881]])]

PROTANOMALY_SEVERITY = [np.array([[0.856167, 0.182038, -0.038205],  # 1
                                  [0.029342, 0.955115, 0.015544],
                                  [-0.002880, -0.001563, 1.004443]]),
                        np.array([[0.734766, 0.334872, -0.069637],  # 2
                                  [0.051840, 0.919198, 0.028963],
                                  [-0.004928, -0.004209, 1.009137]]),
                        np.array([[0.630323, 0.465641, -0.095964],  # 3
                                  [0.069181, 0.890046, 0.040773],
                                  [-0.006308, -0.007724, 1.014032]]),
                        np.array([[0.539009, 0.579343, -0.118352],  # 4
                                  [0.082546, 0.866121, 0.051332],
                                  [-0.007136, -0.011959, 1.019095]]),
                        np.array([[0.458064, 0.679578, -0.137642],  # 5
                                  [0.092785, 0.846313, 0.060902],
                                  [-0.007494, -0.016807, 1.024301]]),
                        np.array([[0.385450, 0.769005, -0.154455],  # 6
                                  [0.100526, 0.829802, 0.069673],
                                  [-0.007442, -0.022190, 1.029632]]),
                        np.array([[0.319627, 0.849633, -0.169261],  # 7
                                  [0.106241, 0.815969, 0.077790],
                                  [-0.007025, -0.028051, 1.035076]]),
                        np.array([[0.259411, 0.923008, -0.182420],  # 8
                                  [0.110296, 0.804340, 0.085364],
                                  [-0.006276, -0.034346, 1.040622]]),
                        np.array([[0.203876, 0.990338, -0.194214],  # 9
                                  [0.112975, 0.794542, 0.092483],
                                  [-0.005222, -0.041043, 1.046265]]),
                        np.array([[0.152286, 1.052583, -0.204868],  # 10
                                  [0.114503, 0.786281, 0.099216],
                                  [-0.003882, -0.048116, 1.051998]])]

TRITANOMALY_SEVERITY = [np.array([[0.926670, 0.092514, -0.019184],  # 1
                                  [0.021191, 0.964503, 0.014306],
                                  [0.008437, 0.054813, 0.936750]]),
                        np.array([[0.895720, 0.133330, -0.029050],  # 2
                                  [0.029997, 0.945400, 0.024603],
                                  [0.013027, 0.104707, 0.882266]]),
                        np.array([[0.905871, 0.127791, -0.033662],  # 3
                                  [0.026856, 0.941251, 0.031893],
                                  [0.013410, 0.148296, 0.838294]]),
                        np.array([[0.948035, 0.089490, -0.037526],  # 4
                                  [0.014364, 0.946792, 0.038844],
                                  [0.010853, 0.193991, 0.795156]]),
                        np.array([[1.017277, 0.027029, -0.044306],  # 5
                                  [-0.006113, 0.958479, 0.047634],
                                  [0.006379, 0.248708, 0.744913]]),
                        np.array([[1.104996, -0.046633, -0.058363], # 6
                                  [-0.032137, 0.971635, 0.060503],
                                  [0.001336, 0.317922, 0.680742]]),
                        np.array([[1.193214, -0.109812, -0.083402], # 7
                                  [-0.058496, 0.979410, 0.079086],
                                  [-0.002346, 0.403492, 0.598854]]),
                        np.array([[1.257728, -0.139648, -0.118081], # 8
                                  [-0.078003, 0.975409, 0.102594],
                                  [-0.003316, 0.501214, 0.502102]]),
                        np.array([[1.278864, -0.125333, -0.153531], # 9
                                  [-0.084748, 0.957674, 0.127074],
                                  [-0.000989, 0.601151, 0.399838]]),
                        np.array([[1.255528, -0.076749, -0.178779], # 10
                                  [-0.078411, 0.930809, 0.147602],
                                  [0.004733, 0.691367, 0.303900]])]

